@startuml

package database {
    class "UserDao" as UD {
        save(user : User)
        getUserByID(id : int) : LiveData<User>
        getFriends() : LiveData<List<User>>\n...
    }
    class "UserGroupDao" as UGD {
        save(userGroup : UserGroup)
        getGroupByID(id : int) : LiveData<UserGroup>\n...
    }
    class "EventDao" as ED {
        save(event : Event)
        getEventByID(id : int) : LiveData<Event>\n...
    }
    class "treffDataBase" as DB {
        getUserDao() : UserDao
        getUserGroupDao() : UserGroupDao
        getEventDao() : EventDao
    }
}

package repositories {
    class "UserRepository" as UR <<Singleton>> {
        +getUser(id : int) : LiveData<User>
        +getFriends() : LiveData<List<User>>\n...
    }
    class "UserGroupRepository" as UGR <<Singleton>> {
        +addGroup(userGroup : UserGroup)
        +getGroup(id : int) : LiveData<UserGroup>\n...
    }
    class "EventRepository" as ER <<Singleton>> {
        +addEvent(event : Event)
        +getEvent(id : int) : LiveData<Event>\n...
    }
}

package networking {
    enum "Error" as E {
        -code : int
        -message : String
        -isUserRelevant : boolean
    }
    class "RequestEncoder" as RE <<Singleton>> {
        -getErrorByCode(code : int) : Error
        +getUser(id : int) : LiveData<User>
        +getFriends() : LiveData<List<User>>
        +addGroup(userGroup : UserGroup)
        +getGroup(id : int) : LiveData<UserGroup>
        +addEvent(event : Event)
        +getEvent(id : int) : LiveData<Event>\n...
    }
    class "ConnectionHandler" as CH {
        +sendRequest(request : String)
    }
}

UR o-up- UD
UGR o-up- UGD
ER o-up- ED

DB o-down- UD
DB o-down- UGD
DB o-down- ED

UR o-down- RE
UGR o-down- RE
ER o-down- RE

RE o-down- CH
RE -right- E


@enduml